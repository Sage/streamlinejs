/*** Generated by streamline 0.10.12 (callbacks) --standalone - DO NOT EDIT ***/ var __rt=(function(){var __modules={},mod;function require(p){var m=__modules[p.substring(3)]; return m && m.exports};__modules['globals']=(mod={exports:{}});(function(module, exports){var glob = typeof global === "object" ? global : window;var secret = "_20c7abceb95c4eb88b7ca1895b1170d1";module.exports = (glob[secret] || (glob[secret] = { context: {} }));var g = glob[secret];g.runtime || Object.defineProperty(g, 'runtime', {get: function() { return g.__runtime__; },set: function(value) {if (g.__runtime__ !== value) {if (g.__runtime__) {if (/-fast$/.test(g.__runtime__) ||/-fast$/.test(value)) throw new Error("cannot mix streamline runtimes: " + g.__runtime__ + " and " + value);console.log("warning: mixing streamline runtimes: " + g.__runtime__ + " and " + value);}g.__runtime__ = value;}}});g.setPromise = function(name) {if (g.Promise) return; var req = require; if (name === true) g.Promise = typeof Promise === "function" ? Promise : req('es6-promise');else g.Promise = require(name);}})(mod, mod.exports);__modules['util/future']=(mod={exports:{}});(function(module, exports){(function(exports) {var globals = require("../globals");exports.future = function(fn, args, i) {var err, result, done, q = [], self = this;args = Array.prototype.slice.call(args);args[i] = function(e, r) {err = e, result = r, done = true;q && q.forEach(function(f) {f.call(self, e, r);});q = null;};args[i].__futurecb = true;fn.apply(this, args);var ret = function F(cb) {if (typeof cb !== 'function') {var globals = require('../globals');if (cb == null && globals.Promise) return exports.promise.call(this, F, [], 0);if (cb !== false && !globals.oldStyleFutures) throw new Error("callback missing (argument #0). See https://github.com/Sage/streamlinejs/blob/master/FAQ.md#no-callback-given-error");return F;}if (done) cb.call(self, err, result);else q.push(cb);};ret.__future = true;return ret;};exports.streamlinify = function(fn, idx) {return function() {if (!arguments[idx]) return exports.future.call(this, fn, arguments, idx);else return fn.apply(this, arguments);};};exports.promise = function(fn, args, i) {if (args[i] === false) return exports.future.call(this, fn, args, i);if (args[i] != null) throw new Error("invalid callback: " + typeof(args[i]));if (globals.oldStyleFutures) return exports.future.call(this, fn, args, i);if (!globals.Promise) throw new Error("callback missing (argument #" + i + "). See https://github.com/Sage/streamlinejs/blob/master/FAQ.md#no-callback-given-error");var self = this;args = Array.prototype.slice.call(args);return new globals.Promise(function(resolve, reject) {args[i] = function(e, r) {if (e) reject(e);else resolve(r);};fn.apply(self, args);});};exports.then = function(promise, method, cb) {promise[method](function(r) {cb && cb(null, r);cb = null;}, function(e) {cb && cb(e);cb = null;});};})(typeof exports !== 'undefined' ? exports : (Streamline.future = Streamline.future || {}));})(mod, mod.exports);__modules['callbacks/runtime']=(mod={exports:{}});(function(module, exports){(function(exports) {var __g = require("../globals");__g.runtime = 'callbacks';var __fut = require("../util/future");__g.context = __g.context || {};__g.depth = __g.depth || 0;__g.trampoline = (function() {var q = [];return {queue: function(fn) {q.push(fn);},flush: function() {__g.depth++;try {var fn;while (fn = q.shift()) fn();} finally {__g.depth--;}}}})();exports.runtime = function(filename, oldStyleFutures) {__g.oldStyleFutures = oldStyleFutures;function __func(_, __this, __arguments, fn, index, frame, body) {if (typeof _ !== 'function') return __fut.promise.call(__this, fn, __arguments, index);frame.file = filename;frame.prev = __g.frame;frame.calls = 0;if (frame.prev) frame.prev.calls++;__g.frame = frame;__g.depth === 0 && __g.emitter && __g.emitter.emit("resume");__g.depth++;__g.emitter && __g.emitter.emit("enter", _); try {frame.active = true;body();} catch (e) {__setEF(e, frame.prev);__propagate(_, e);} finally {frame.active = false;__g.emitter && __g.emitter.emit("exit");__g.frame = frame.prev;if (--__g.depth === 0 && __g.trampoline) __g.trampoline.flush();__g.depth === 0 && __g.emitter && __g.emitter.emit("yield");}}return {__g: __g,__func: __func,__cb: __cb,__future: __fut.future,__propagate: __propagate,__trap: __trap,__tryCatch: __tryCatch,__catch: __catch,__forIn: __forIn,__apply: __apply,__construct: __construct,__setEF: __setEF,streamlinify: __fut.streamlinify,__pthen: __fut.then,};};function __cb(_, frame, offset, col, fn, trampo, returnArray) {frame.offset = offset;frame.col = col;var ctx = __g.context;var calls = frame.calls;var ret = function ___(err, result) {if (returnArray) result = Array.prototype.slice.call(arguments, 1);returnArray = false; var oldFrame = __g.frame;__g.frame = frame;__g.context = ctx;__g.depth === 0 && __g.emitter && __g.emitter.emit("resume");__g.depth++;__g.emitter && __g.emitter.emit('enter');try {if (trampo && frame.active && __g.trampoline) {__g.trampoline.queue(function() {return ___(err, result);});} else {___.dispatched = true;if (err) {__setEF(err, frame);return _(err);}frame.active = true;return fn(null, result);}} catch (ex) {if (___.dispatched && _.name !== '___' && _.name !== '__trap' && calls !== frame.calls) throw ex;__setEF(ex, frame);return __propagate(_, ex);} finally {frame.active = false;__g.emitter && __g.emitter.emit("exit");__g.frame = oldFrame;if (--__g.depth === 0 && __g.trampoline) __g.trampoline.flush();__g.depth === 0 && __g.emitter && __g.emitter.emit("yield");}};ret.__streamlined = true;return ret;}function __propagate(_, err) {try {_(err);} catch (ex) {__trap(ex);}}function __trap(err) {if (err) {if (__g.context && __g.context.errorHandler) __g.context.errorHandler(err);else process.nextTick(function() {throw err;});}}function __tryCatch(_, fn) {try {fn();} catch (e) {try {_(e);} catch (ex) {__trap(ex);}}}function __catch(fn) {var frame = __g.frame,context = __g.context;__g.trampoline.queue(function() {var oldFrame = __g.frame,oldContext = __g.context;__g.frame = frame;__g.context = context;try {fn();} finally {__g.frame = oldFrame;__g.context = oldContext;}});}function __forIn(object) {var array = [];for (var obj in object) {array.push(obj);}return array;}function __apply(cb, fn, thisObj, args, index) {if (cb == null) return __fut.future(__apply, arguments, 0);args = Array.prototype.slice.call(args, 0);args[index != null ? index : args.length] = cb;return fn.apply(thisObj, args);}function __construct(constructor, i) {var key = '__async' + i,f;return constructor[key] || (constructor[key] = function() {var args = arguments;function F() {var self = this;var cb = args[i];args[i] = function(e, r) {cb(e, self);};args[i].__streamlined = cb.__streamlined;args[i].__futurecb = cb.__futurecb;return constructor.apply(self, args);}F.prototype = constructor.prototype;return new F();});}function __setEF(e, f) {function formatStack(e, raw) {var ff = typeof navigator === 'object' && navigator.userAgent.toLowerCase().indexOf('firefox') > -1;if (ff) raw = "Error: " + e.message + '\n' + raw;var s = raw,f, skip;if (s) {var lines = s.split('\n');s = lines[0] + '\n    <<< async stack >>>\n' + lines.slice(1).map(function(l) {var ffOffset = (typeof navigator === 'object' && typeof require === 'function' && require.async) ? 11 : 0;var m = /([^@]*)\@(.*?)\:(\d+)(?:\:(\d+))?$/.exec(l);l = m ? "    at " + m[1] + " (" + m[2] + ":" + (parseInt(m[3]) - ffOffset) + ":" + (m[4] || "0") + ")" : l;var i = l.indexOf('__$');if (i >= 0 && !skip) {skip = true;return l.substring(0, i) + l.substring(i + 3);}return skip ? '' : l;}).filter(function(l) {return l;}).join('\n');for (var f = e.__frame; f; f = f.prev) {if (f.offset >= 0) s += "\n    at " + f.name + " (" + f.file + ":" + (f.line + f.offset) + ":" + (f.col+1) + ")"}}var nl = raw.indexOf('\n');s += '\n    <<< raw stack >>>' + (nl >= 0 ? raw.substring(nl) : raw);return s;};e.__frame = e.__frame || f;if (exports.stackTraceEnabled && e.__lookupGetter__ && e.__lookupGetter__("rawStack") == null) {var getter = e.__lookupGetter__("stack");if (!getter) { var raw = e.stack || "raw stack unavailable";getter = function() {return raw;}}e.__defineGetter__("rawStack", getter);e.__defineGetter__("stack", function() {return formatStack(e, getter());});}}exports.stackTraceEnabled = true;})(typeof exports !== 'undefined' ? exports : (Streamline.runtime = Streamline.runtime || {}));require && require("../callbacks/builtins");})(mod, mod.exports);return __modules['callbacks/runtime'].exports.runtime('test/common/eval-test._js', false);})(),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch,__forIn=__rt.__forIn,__construct=__rt.__construct,__pthen=__rt.__pthen; QUnit.module(module.id);

function evalTest(f, val) {
  f(function(err, result) {
    var str = (err ? ("ERR: " + err) : result);
    strictEqual(str, val, val);
    start(); });};



function delay(_, val) { var __frame = { name: "delay", line: 11 }; return __func(_, this, arguments, delay, 0, __frame, function __$delay() {
    return setTimeout(__cb(_, __frame, 1, 1, function __$delay() {
      return _(null, val); }, true), 0); });};


function delayFail(_, err) { var __frame = { name: "delayFail", line: 16 }; return __func(_, this, arguments, delayFail, 0, __frame, function __$delayFail() {
    return setTimeout(__cb(_, __frame, 1, 1, function __$delayFail() {
      return _(err); }, true), 0); });};


function throwError(message) {
  throw new Error(message);};


asyncTest("eval return", 1, function __1(_) { var __frame = { name: "__1", line: 25 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
    evalTest(function f(_) { var __frame = { name: "f", line: 26 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        return delay(__cb(_, __frame, 1, 9, _, true), 5); });
    }, 5); _(); });});

asyncTest("eval if true", 1, function __2(_) { var __frame = { name: "__2", line: 30 }; return __func(_, this, arguments, __2, 0, __frame, function __$__2() {
    evalTest(function f(_) { var __frame = { name: "f", line: 31 }; return __func(_, this, arguments, f, 0, __frame, function __$f() { return (function __$f(__then) {
          if (true) { return delay(__cb(_, __frame, 1, 19, _, true), 3); } else { __then(); } ; })(function __$f() {
          return _(null, 4); }); });
    }, 3); _(); });});

asyncTest("eval if false", 1, function __3(_) { var __frame = { name: "__3", line: 36 }; return __func(_, this, arguments, __3, 0, __frame, function __$__3() {
    evalTest(function f(_) { var __frame = { name: "f", line: 37 }; return __func(_, this, arguments, f, 0, __frame, function __$f() { return (function __$f(__then) {
          if (false) { return delay(__cb(_, __frame, 1, 20, _, true), 3); } else { __then(); } ; })(function __$f() {
          return _(null, 4); }); });
    }, 4); _(); });});

asyncTest("eval while", 1, function __4(_) { var __frame = { name: "__4", line: 42 }; return __func(_, this, arguments, __4, 0, __frame, function __$__4() {
    evalTest(function f(_) { var i, result; var __frame = { name: "f", line: 43 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        i = 1;
        result = 1; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$f() { __more = false;
            var __2 = (i < 5); if (__2) {
              return delay(__cb(_, __frame, 4, 12, function ___(__0, __1) { result = __1;
                i++; while (__more) { __loop(); }; __more = true; }, true), (i * result)); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$f() {

          return _(null, result); }); });
    }, 24); _(); });});

asyncTest("eval for", 1, function __5(_) { var __frame = { name: "__5", line: 53 }; return __func(_, this, arguments, __5, 0, __frame, function __$__5() {
    evalTest(function f(_) { var result, i; var __frame = { name: "f", line: 54 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        result = 1;
        i = 1; var __4 = false; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$f() { __more = false; if (__4) { i++; } else { __4 = true; } ; var __3 = (i < 5); if (__3) {
              return delay(__cb(_, __frame, 3, 12, function ___(__0, __1) { return delay(__cb(_, __frame, 3, 26, function ___(__0, __2) { result = (__1 * __2); while (__more) { __loop(); }; __more = true; }, true), result); }, true), i); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$f() {

          return _(null, result); }); });
    }, 24); _(); });});

asyncTest("eval for in", 1, function __6(_) { var __frame = { name: "__6", line: 62 }; return __func(_, this, arguments, __6, 0, __frame, function __$__6() {
    evalTest(function f(_) { var foo, result, k; var __frame = { name: "f", line: 63 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        foo = {
          a: 1,
          b: 2,
          c: 3,
          d: 5 };

        result = 1;
        var __1 = __forIn(foo); var __2 = 0; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$f() { __more = false; var __6 = (__2 < __1.length); if (__6) { k = __1[__2++];
              return delay(__cb(_, __frame, 9, 25, function ___(__0, __3) { return delay(__cb(_, __frame, 9, 12, function ___(__0, __4) { return delay(__cb(_, __frame, 9, 41, function ___(__0, __5) { result = (__4 * __5); while (__more) { __loop(); }; __more = true; }, true), result); }, true), foo[__3]); }, true), k); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$f() {

          return _(null, result); }); });
    }, 30); _(); });});

asyncTest("fully async for in", 1, function __7(_) { var __frame = { name: "__7", line: 77 }; return __func(_, this, arguments, __7, 0, __frame, function __$__7() {
    evalTest(function f(_) { var result, i; var __frame = { name: "f", line: 78 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        result = 1;
        return delay(__cb(_, __frame, 2, 15, function ___(__0, __1) { i = __1; var __6 = false; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$f() { __more = false; return (function __$f(__then) { if (__6) { return (function __$f(_) { return delay(__cb(_, __frame, 2, 49, function ___(__0, __1) { i = (__1 + 1); _(); }, true), i); })(__cb(_, __frame, -77, 21, __then, true)); } else { __6 = true; __then(); } ; })(function __$f() { return (function __$f(_) { return delay(__cb(_, __frame, 2, 32, function ___(__0, __2) { var __1 = (i < __2); return _(null, __1); }, true), 5); })(__cb(_, __frame, -77, 21, function ___(__0, __5) { if (__5) {
                    return delay(__cb(_, __frame, 3, 12, function ___(__0, __2) { return delay(__cb(_, __frame, 3, 31, function ___(__0, __3) { result = (__2 * __3); while (__more) { __loop(); }; __more = true; }, true), i); }, true), result); } else { __break(); } ; }, true)); }); }); do { __loop(); } while (__more); __more = true; })(function __$f() {

            return _(null, result); }); }, true), 2); });
    }, 24); _(); });});

asyncTest("break in loop", 1, function __8(_) { var __frame = { name: "__8", line: 86 }; return __func(_, this, arguments, __8, 0, __frame, function __$__8() {
    evalTest(function f(_) { var result, i; var __frame = { name: "f", line: 87 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        result = 1;
        i = 1; var __4 = false; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$f() { __more = false; if (__4) { i++; } else { __4 = true; } ; var __3 = (i < 10); if (__3) {
              if ((i == 5)) { return __break(); } ;
              return delay(__cb(_, __frame, 4, 12, function ___(__0, __1) { return delay(__cb(_, __frame, 4, 31, function ___(__0, __2) { result = (__1 * __2); while (__more) { __loop(); }; __more = true; }, true), i); }, true), result); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$f() {

          return _(null, result); }); });
    }, 24); _(); });});

asyncTest("continue", 1, function __9(_) { var __frame = { name: "__9", line: 96 }; return __func(_, this, arguments, __9, 0, __frame, function __$__9() {
    evalTest(function f(_) { var result, i; var __frame = { name: "f", line: 97 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        result = 1;
        i = 1; var __4 = false; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$f() { __more = false; if (__4) { i++; } else { __4 = true; } ; var __3 = (i < 10); if (__3) {
              if ((i >= 5)) { while (__more) { __loop(); }; __more = true; return; } ;
              return delay(__cb(_, __frame, 4, 12, function ___(__0, __1) { return delay(__cb(_, __frame, 4, 31, function ___(__0, __2) { result = (__1 * __2); while (__more) { __loop(); }; __more = true; }, true), i); }, true), result); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$f() {

          return _(null, result); }); });
    }, 24); _(); });});

asyncTest("break in while", 1, function __10(_) { var __frame = { name: "__10", line: 106 }; return __func(_, this, arguments, __10, 0, __frame, function __$__10() {
    evalTest(function f(_) { var i, result; var __frame = { name: "f", line: 107 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        i = 1;
        result = 1; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$f() { __more = false;
            var __3 = (i < 10); if (__3) {
              if ((i == 5)) { return __break(); } ;
              return delay(__cb(_, __frame, 5, 12, function ___(__0, __1) { return delay(__cb(_, __frame, 5, 31, function ___(__0, __2) { result = (__1 * __2);
                  i++; while (__more) { __loop(); }; __more = true; }, true), i); }, true), result); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$f() {

          return _(null, result); }); });
    }, 24); _(); });});

asyncTest("continue in while", 1, function __11(_) { var __frame = { name: "__11", line: 118 }; return __func(_, this, arguments, __11, 0, __frame, function __$__11() {
    evalTest(function f(_) { var i, result; var __frame = { name: "f", line: 119 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        i = 1;
        result = 1; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$f() { __more = false;
            var __3 = (i < 10); if (__3) {
              i++;
              if ((i >= 5)) { while (__more) { __loop(); }; __more = true; return; } ;
              return delay(__cb(_, __frame, 6, 12, function ___(__0, __1) { return delay(__cb(_, __frame, 6, 31, function ___(__0, __2) { result = (__1 * __2); while (__more) { __loop(); }; __more = true; }, true), i); }, true), result); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$f() {

          return _(null, result); }); });
    }, 24); _(); });});

asyncTest("for (;;)", 1, function __12(_) { var __frame = { name: "__12", line: 130 }; return __func(_, this, arguments, __12, 0, __frame, function __$__12() {
    evalTest(function f(_) { var i; var __frame = { name: "f", line: 131 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        i = 0; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$f() { __more = false; var __3 = 1; if (__3) {

              return delay(__cb(_, __frame, 3, 7, function ___(__0, __2) { var __1 = (__2 === 10); return (function __$f(__then) { if (__1) { return _(null, i); } else { __then(); } ; })(function __$f() { while (__more) { __loop(); }; __more = true; }); }, true), ++i); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(_); });

    }, 10); _(); });});

asyncTest("eval lazy", 1, function __13(_) { var __frame = { name: "__13", line: 138 }; return __func(_, this, arguments, __13, 0, __frame, function __$__13() {
    evalTest(function f(_) { var result; var __frame = { name: "f", line: 139 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        result = 1; return (function __$f(_) { return (function __$f(_) {
            return delay(__cb(_, __frame, 2, 18, function ___(__0, __3) { return delay(__cb(_, __frame, 2, 9, function ___(__0, __2) { var __4 = !__2; return (function __$f(__then) { if (__4) { var __5 = __2; return _(null, __5); } else { __then(); } ; })(function __$f() { return _(null, true); }); }, true), (__3 < 5)); }, true), (result + 8)); })(__cb(_, __frame, -138, 21, function ___(__0, __1) { var __3 = __1; return (function __$f(__then) { if (__3) { return _(null, 2); } else { __then(); } ; })(function __$f() { return _(null, 4); }); }, true)); })(__cb(_, __frame, -138, 21, _, true)); });
    }, 4); _(); });});

asyncTest("eval lazy full async", 1, function __14(_) { var __frame = { name: "__14", line: 144 }; return __func(_, this, arguments, __14, 0, __frame, function __$__14() {
    evalTest(function f(_) { var result; var __frame = { name: "f", line: 145 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        result = 1; return (function __$f(_) { return (function __$f(_) {
            return delay(__cb(_, __frame, 2, 18, function ___(__0, __3) { return delay(__cb(_, __frame, 2, 9, function ___(__0, __2) { var __4 = !__2; return (function __$f(__then) { if (__4) { var __5 = __2; return _(null, __5); } else { __then(); } ; })(function __$f() { return _(null, true); }); }, true), (__3 < 5)); }, true), (result + 8)); })(__cb(_, __frame, -144, 21, function ___(__0, __1) { var __3 = __1; return (function __$f(__then) { if (__3) { return delay(__cb(_, __frame, 2, 54, _, true), 2); } else { __then(); } ; })(function __$f() { return delay(__cb(_, __frame, 2, 68, _, true), 4); }); }, true)); })(__cb(_, __frame, -144, 21, _, true)); });
    }, 4); _(); });});

asyncTest("try catch 1", 1, function __15(_) { var __frame = { name: "__15", line: 150 }; return __func(_, this, arguments, __15, 0, __frame, function __$__15() {
    evalTest(function f(_) { var __frame = { name: "f", line: 151 }; return __func(_, this, arguments, f, 0, __frame, function __$f() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {

              return delay(__cb(_, __frame, 2, 10, _, true), "ok"); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                return delay(__cb(_, __frame, 4, 10, _, true), "err"); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() { _(); }); }); });

    }, "ok"); _(); });});

asyncTest("try catch 2", 1, function __16(_) { var __frame = { name: "__16", line: 159 }; return __func(_, this, arguments, __16, 0, __frame, function __$__16() {
    evalTest(function f(_) { var __frame = { name: "f", line: 160 }; return __func(_, this, arguments, f, 0, __frame, function __$f() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {

              return delay(__cb(_, __frame, 2, 9, function ___(__0, __3) { return _(__3); }, true), "thrown"); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                return delay(__cb(_, __frame, 4, 10, function ___(__0, __2) { var __1 = (__2 + ex); return _(null, __1); }, true), "caught "); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() { _(); }); }); });

    }, "caught thrown"); _(); });});

asyncTest("try catch 3", 1, function __17(_) { var __frame = { name: "__17", line: 168 }; return __func(_, this, arguments, __17, 0, __frame, function __$__17() {
    evalTest(function f(_) { var __frame = { name: "f", line: 169 }; return __func(_, this, arguments, f, 0, __frame, function __$f() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {

              return delay(__cb(_, __frame, 2, 9, function ___(__0, __3) { return _(__3); }, true), "thrown"); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                return delay(__cb(_, __frame, 4, 10, function ___(__0, __2) { var __1 = (__2 + ex); return _(null, __1); }, true), "caught "); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() { _(); }); }); });

    }, "caught thrown"); _(); });});

asyncTest("try catch 5", 1, function __18(_) { var __frame = { name: "__18", line: 177 }; return __func(_, this, arguments, __18, 0, __frame, function __$__18() {
    evalTest(function f(_) { var __frame = { name: "f", line: 178 }; return __func(_, this, arguments, f, 0, __frame, function __$f() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {

              return delayFail(__cb(_, __frame, 2, 3, __then, true), "delay fail"); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                return delay(__cb(_, __frame, 4, 10, function ___(__0, __2) { var __1 = (__2 + ex); return _(null, __1); }, true), "caught "); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() { _(); }); }); });

    }, "caught delay fail"); _(); });});

asyncTest("try catch 6", 1, function __19(_) { var __frame = { name: "__19", line: 186 }; return __func(_, this, arguments, __19, 0, __frame, function __$__19() {
    evalTest(function f(_) { var __frame = { name: "f", line: 187 }; return __func(_, this, arguments, f, 0, __frame, function __$f() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {

              throwError("direct");
              return delay(__cb(_, __frame, 3, 10, _, true), "ok"); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                return delay(__cb(_, __frame, 5, 10, function ___(__0, __2) { var __1 = (__2 + ex.message); return _(null, __1); }, true), "caught "); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() { _(); }); }); });

    }, "caught direct"); _(); });});

asyncTest("try catch 7", 1, function __20(_) { var __frame = { name: "__20", line: 196 }; return __func(_, this, arguments, __20, 0, __frame, function __$__20() {
    evalTest(function f(_) { var message; var __frame = { name: "f", line: 197 }; return __func(_, this, arguments, f, 0, __frame, function __$f() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {

              return delay(__cb(_, __frame, 2, 17, function ___(__0, __3) { message = __3;
                throwError(message);
                return delay(__cb(_, __frame, 4, 10, _, true), "ok"); }, true), "indirect"); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                return delay(__cb(_, __frame, 6, 10, function ___(__0, __2) { var __1 = (__2 + ex.message); return _(null, __1); }, true), "caught "); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() { _(); }); }); });

    }, "caught indirect"); _(); });});

asyncTest("try finally 1", 1, function __21(_) { var __frame = { name: "__21", line: 207 }; return __func(_, this, arguments, __21, 0, __frame, function __$__21() {
    evalTest(function f(_) { var x; var __frame = { name: "f", line: 208 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        x = ""; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {

              return delay(__cb(_, __frame, 3, 8, function ___(__0, __1) { x += __1; _(null, null, true); }, true), "try"); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$f() {

                return delay(__cb(_, __frame, 5, 8, function ___(__0, __2) { x += __2; __then(); }, true), " finally"); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$f() {

            x += " end";
            return _(null, x); }); }); });
    }, "try finally end"); _(); });});

asyncTest("try finally 2", 1, function __22(_) { var __frame = { name: "__22", line: 219 }; return __func(_, this, arguments, __22, 0, __frame, function __$__22() {
    evalTest(function f(_) { var x; var __frame = { name: "f", line: 220 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        x = ""; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {

              return delay(__cb(_, __frame, 3, 8, function ___(__0, __1) { x += __1;
                return _(null, x); }, true), "try"); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$f() {

                return delay(__cb(_, __frame, 6, 8, function ___(__0, __2) { x += __2; __then(); }, true), " finally"); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$f() {

            x += " end";
            return _(null, x); }); }); });
    }, "try"); _(); });});

asyncTest("try finally 3", 1, function __23(_) { var __frame = { name: "__23", line: 232 }; return __func(_, this, arguments, __23, 0, __frame, function __$__23() {
    evalTest(function f(_) { var x; var __frame = { name: "f", line: 233 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        x = ""; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {

              return delay(__cb(_, __frame, 3, 8, function ___(__0, __1) { x += __1;
                return _("bad try"); }, true), "try"); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$f() {

                return delay(__cb(_, __frame, 6, 8, function ___(__0, __2) { x += __2; __then(); }, true), " finally"); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$f() {

            x += " end";
            return _(null, x); }); }); });
    }, "ERR: bad try"); _(); });});

asyncTest("try finally 4", 1, function __24(_) { var __frame = { name: "__24", line: 245 }; return __func(_, this, arguments, __24, 0, __frame, function __$__24() {
    evalTest(function f(_) { var x; var __frame = { name: "f", line: 246 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        x = ""; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {

              return delay(__cb(_, __frame, 3, 8, function ___(__0, __1) { x += __1;
                throwError("except"); _(null, null, true); }, true), "try"); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$f() {

                return delay(__cb(_, __frame, 6, 8, function ___(__0, __2) { x += __2; __then(); }, true), " finally"); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$f() {

            x += " end";
            return _(null, x); }); }); });
    }, "ERR: Error: except"); _(); });});

asyncTest("try finally 5", 1, function __25(_) { var __frame = { name: "__25", line: 258 }; return __func(_, this, arguments, __25, 0, __frame, function __$__25() {
    evalTest(function f(_) { var x; var __frame = { name: "f", line: 259 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        x = ""; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {


                    return delay(__cb(_, __frame, 4, 9, function ___(__0, __1) { x += __1;
                      throwError("except");
                      x += " unreached"; _(null, null, true); }, true), "try"); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$f() {

                      return delay(__cb(_, __frame, 8, 9, function ___(__0, __2) { x += __2; __then(); }, true), " finally"); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$f() {

                  x += " end";
                  return _(null, x); }); }); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                return _(null, ((x + "/") + ex.message)); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() { _(); }); }); });

    }, "try finally/except"); _(); });});

asyncTest("try catch finally 1", 1, function __26(_) { var __frame = { name: "__26", line: 276 }; return __func(_, this, arguments, __26, 0, __frame, function __$__26() {
    evalTest(function f(_) { var x; var __frame = { name: "f", line: 277 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        x = ""; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {


                          return delay(__cb(_, __frame, 4, 9, function ___(__0, __2) { x += __2;
                            return _(new Error("except")); }, true), "try"); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {


                            return delay(__cb(_, __frame, 8, 9, function ___(__0, __1) { x += __1;
                              return _(ex); }, true), (" catch " + ex.message)); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$f() {

                      return delay(__cb(_, __frame, 11, 9, function ___(__0, __3) { x += __3; __then(); }, true), " finally"); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$f() {

                  x += " end";
                  return _(null, x); }); }); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                return _(null, ((x + "/") + ex.message)); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() { _(); }); }); });

    }, "try catch except finally/except"); _(); });});

asyncTest("try catch finally 2", 1, function __27(_) { var __frame = { name: "__27", line: 297 }; return __func(_, this, arguments, __27, 0, __frame, function __$__27() {
    evalTest(function f(_) { var x; var __frame = { name: "f", line: 298 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        x = ""; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {


                          return delay(__cb(_, __frame, 4, 9, function ___(__0, __1) { x += __1;
                            throwError("except");
                            x += " unreached"; __then(); }, true), "try"); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                            x += (" catch " + ex.message);
                            return _(ex); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$f() {

                      x += " finally"; __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$f() {

                  x += " end";
                  return _(null, x); }); }); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                return _(null, ((x + "/") + ex.message)); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() { _(); }); }); });

    }, "try catch except finally/except"); _(); });});

asyncTest("nested try/catch 1", 1, function __28(_) { var __frame = { name: "__28", line: 318 }; return __func(_, this, arguments, __28, 0, __frame, function __$__28() {
    evalTest(function f(_) { var x; var __frame = { name: "f", line: 319 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        x = ""; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {


                    return delay(__cb(_, __frame, 4, 9, function ___(__0, __2) { x += __2; __then(); }, true), "try"); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                      return delay(__cb(_, __frame, 6, 9, function ___(__0, __1) { x += __1; __then(); }, true), (" inner catch " + ex.message)); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() {

                  throwError(" except"); __then(); }); }); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                return _(null, ((x + " outer catch") + ex.message)); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() { _(); }); }); });

    }, "try outer catch except"); _(); });});

asyncTest("nested try/catch 2", 1, function __29(_) { var __frame = { name: "__29", line: 333 }; return __func(_, this, arguments, __29, 0, __frame, function __$__29() {
    evalTest(function f(_) { var x; var __frame = { name: "f", line: 334 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        x = ""; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {


                    return delay(__cb(_, __frame, 4, 9, function ___(__0, __1) { x += __1; __then(); }, true), "try"); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                      x += (" inner catch " + ex.message); __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() {

                  return _(new Error(" except")); }); }); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                return _(null, ((x + " outer catch") + ex.message)); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() { _(); }); }); });

    }, "try outer catch except"); _(); });});

asyncTest("nested try/catch 3", 1, function __30(_) { var __frame = { name: "__30", line: 348 }; return __func(_, this, arguments, __30, 0, __frame, function __$__30() {
    evalTest(function f(_) { var x; var __frame = { name: "f", line: 349 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        x = ""; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {


                    return delay(__cb(_, __frame, 4, 9, function ___(__0, __2) { x += __2; __then(); }, true), "try"); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                      return delay(__cb(_, __frame, 6, 9, function ___(__0, __1) { x += __1; __then(); }, true), (" inner catch " + ex.message)); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() {

                  return _(new Error(" except")); }); }); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                return _(null, ((x + " outer catch") + ex.message)); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() { _(); }); }); });

    }, "try outer catch except"); _(); });});

asyncTest("nested try/finally 1", 1, function __31(_) { var __frame = { name: "__31", line: 363 }; return __func(_, this, arguments, __31, 0, __frame, function __$__31() {
    evalTest(function f(_) { var x; var __frame = { name: "f", line: 364 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        x = ""; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {


                    return delay(__cb(_, __frame, 4, 9, function ___(__0, __1) { x += __1; _(null, null, true); }, true), "try"); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$f() {

                      return delay(__cb(_, __frame, 6, 9, function ___(__0, __2) { x += __2; __then(); }, true), " inner finally"); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$f() {

                  throwError(" except"); __then(); }); }); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                return _(null, ((x + " outer catch") + ex.message)); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() { _(); }); }); });

    }, "try inner finally outer catch except"); _(); });});

asyncTest("nested try/finally 2", 1, function __32(_) { var __frame = { name: "__32", line: 378 }; return __func(_, this, arguments, __32, 0, __frame, function __$__32() {
    evalTest(function f(_) { var x; var __frame = { name: "f", line: 379 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        x = ""; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {


                    return delay(__cb(_, __frame, 4, 9, function ___(__0, __1) { x += __1; _(null, null, true); }, true), "try"); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$f() {

                      x += " inner finally"; __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$f() {

                  throwError(" except"); __then(); }); }); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                return _(null, ((x + " outer catch") + ex.message)); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() { _(); }); }); });

    }, "try inner finally outer catch except"); _(); });});

asyncTest("nested try/finally 3", 1, function __33(_) { var __frame = { name: "__33", line: 393 }; return __func(_, this, arguments, __33, 0, __frame, function __$__33() {
    evalTest(function f(_) { var x; var __frame = { name: "f", line: 394 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        x = ""; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {


                    return delay(__cb(_, __frame, 4, 9, function ___(__0, __1) { x += __1; _(null, null, true); }, true), "try"); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$f() {

                      return delay(__cb(_, __frame, 6, 9, function ___(__0, __2) { x += __2; __then(); }, true), " inner finally"); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$f() {

                  return _(new Error(" except")); }); }); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                return _(null, ((x + " outer catch") + ex.message)); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() { _(); }); }); });

    }, "try inner finally outer catch except"); _(); });});

asyncTest("and ok", 1, function __34(_) { var __frame = { name: "__34", line: 408 }; return __func(_, this, arguments, __34, 0, __frame, function __$__34() {
    evalTest(function f(_) { var x; var __frame = { name: "f", line: 409 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        x = "<<"; return (function __$f(_) {
          return delay(__cb(_, __frame, 2, 6, function ___(__0, __1) { var __2 = !__1; return (function __$f(__then) { if (__2) { var __3 = __1; return _(null, __3); } else { __then(); } ; })(function __$f() { return delay(__cb(_, __frame, 2, 24, _, true), true); }); }, true), true); })(__cb(_, __frame, -408, 21, function ___(__0, __6) { return (function __$f(__then) { if (__6) { x += "T1"; __then(); } else {
              x += "F1"; __then(); } ; })(function __$f() { return (function __$f(_) {
              return delay(__cb(_, __frame, 4, 6, function ___(__0, __2) { var __3 = !__2; return (function __$f(__then) { if (__3) { var __4 = __2; return _(null, __4); } else { __then(); } ; })(function __$f() { return delay(__cb(_, __frame, 4, 24, _, true), false); }); }, true), true); })(__cb(_, __frame, -408, 21, function ___(__0, __7) { return (function __$f(__then) { if (__7) { x += "T2"; __then(); } else {
                  x += "F2"; __then(); } ; })(function __$f() { return (function __$f(_) {
                  return delay(__cb(_, __frame, 6, 6, function ___(__0, __3) { var __4 = !__3; return (function __$f(__then) { if (__4) { var __5 = __3; return _(null, __5); } else { __then(); } ; })(function __$f() { return delay(__cb(_, __frame, 6, 25, _, true), true); }); }, true), false); })(__cb(_, __frame, -408, 21, function ___(__0, __8) { return (function __$f(__then) { if (__8) { x += "T3"; __then(); } else {
                      x += "F3"; __then(); } ; })(function __$f() { return (function __$f(_) {
                      return delay(__cb(_, __frame, 8, 6, function ___(__0, __4) { var __5 = !__4; return (function __$f(__then) { if (__5) { var __6 = __4; return _(null, __6); } else { __then(); } ; })(function __$f() { return delay(__cb(_, __frame, 8, 25, _, true), false); }); }, true), false); })(__cb(_, __frame, -408, 21, function ___(__0, __9) { return (function __$f(__then) { if (__9) { x += "T4"; __then(); } else {
                          x += "F4"; __then(); } ; })(function __$f() { return (function __$f(_) {
                          return delay(__cb(_, __frame, 10, 6, function ___(__0, __5) { var __6 = !__5; return (function __$f(__then) { if (__6) { var __7 = __5; return _(null, __7); } else { __then(); } ; })(function __$f() { return delayFail(__cb(_, __frame, 10, 25, _, true), "bad"); }); }, true), false); })(__cb(_, __frame, -408, 21, function ___(__0, __10) { return (function __$f(__then) { if (__10) { x += "T5"; __then(); } else {
                              x += "F5"; __then(); } ; })(function __$f() {
                            x += ">>";
                            return _(null, x); }); }, true)); }); }, true)); }); }, true)); }); }, true)); }); }, true)); });
    }, "<<T1F2F3F4F5>>"); _(); });});

asyncTest("or ok", 1, function __35(_) { var __frame = { name: "__35", line: 425 }; return __func(_, this, arguments, __35, 0, __frame, function __$__35() {
    evalTest(function f(_) { var x; var __frame = { name: "f", line: 426 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        x = "<<"; return (function __$f(_) {
          return delay(__cb(_, __frame, 2, 6, function ___(__0, __1) { var __2 = __1; return (function __$f(__then) { if (__2) { var __3 = __1; return _(null, __3); } else { __then(); } ; })(function __$f() { return delay(__cb(_, __frame, 2, 24, _, true), true); }); }, true), true); })(__cb(_, __frame, -425, 21, function ___(__0, __6) { return (function __$f(__then) { if (__6) { x += "T1"; __then(); } else {
              x += "F1"; __then(); } ; })(function __$f() { return (function __$f(_) {
              return delay(__cb(_, __frame, 4, 6, function ___(__0, __2) { var __3 = __2; return (function __$f(__then) { if (__3) { var __4 = __2; return _(null, __4); } else { __then(); } ; })(function __$f() { return delay(__cb(_, __frame, 4, 24, _, true), false); }); }, true), true); })(__cb(_, __frame, -425, 21, function ___(__0, __7) { return (function __$f(__then) { if (__7) { x += "T2"; __then(); } else {
                  x += "F2"; __then(); } ; })(function __$f() { return (function __$f(_) {
                  return delay(__cb(_, __frame, 6, 6, function ___(__0, __3) { var __4 = __3; return (function __$f(__then) { if (__4) { var __5 = __3; return _(null, __5); } else { __then(); } ; })(function __$f() { return delay(__cb(_, __frame, 6, 25, _, true), true); }); }, true), false); })(__cb(_, __frame, -425, 21, function ___(__0, __8) { return (function __$f(__then) { if (__8) { x += "T3"; __then(); } else {
                      x += "F3"; __then(); } ; })(function __$f() { return (function __$f(_) {
                      return delay(__cb(_, __frame, 8, 6, function ___(__0, __4) { var __5 = __4; return (function __$f(__then) { if (__5) { var __6 = __4; return _(null, __6); } else { __then(); } ; })(function __$f() { return delay(__cb(_, __frame, 8, 25, _, true), false); }); }, true), false); })(__cb(_, __frame, -425, 21, function ___(__0, __9) { return (function __$f(__then) { if (__9) { x += "T4"; __then(); } else {
                          x += "F4"; __then(); } ; })(function __$f() { return (function __$f(_) {
                          return delay(__cb(_, __frame, 10, 6, function ___(__0, __5) { var __6 = __5; return (function __$f(__then) { if (__6) { var __7 = __5; return _(null, __7); } else { __then(); } ; })(function __$f() { return delayFail(__cb(_, __frame, 10, 24, _, true), "bad"); }); }, true), true); })(__cb(_, __frame, -425, 21, function ___(__0, __10) { return (function __$f(__then) { if (__10) { x += "T5"; __then(); } else {
                              x += "F5"; __then(); } ; })(function __$f() {
                            x += ">>";
                            return _(null, x); }); }, true)); }); }, true)); }); }, true)); }); }, true)); }); }, true)); });
    }, "<<T1T2T3F4T5>>"); _(); });});

asyncTest("switch with default", 1, function __36(_) { var __frame = { name: "__36", line: 442 }; return __func(_, this, arguments, __36, 0, __frame, function __$__36() {
    evalTest(function f(_) {
      function g(_, i) { var result; var __frame = { name: "g", line: 444 }; return __func(_, this, arguments, g, 0, __frame, function __$g() {
          result = "a";
          return delay(__cb(_, __frame, 2, 11, function ___(__0, __1) { return (function __$g(__break) { switch (__1) {
              case 1: return delay(__cb(_, __frame, 4, 13, function ___(__0, __2) {
                  result = __2; return __break(); }, true), "b"); case 2:

                return delay(__cb(_, __frame, 7, 11, _, true), "c");
              case 3:
              
              case 4: return delay(__cb(_, __frame, 10, 13, function ___(__0, __4) {
                  result = __4; return __break(); }, true), "d"); default:

                return delay(__cb(_, __frame, 13, 13, function ___(__0, __5) {
                  result = __5; return __break(); }, true), "e"); }; })(function __$g() {

              return _(null, result); }); }, true), i); }); }; var __frame = { name: "f", line: 443 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {


        return g(__cb(_, __frame, 19, 9, function ___(__0, __2) { return g(__cb(_, __frame, 19, 19, function ___(__0, __3) { return g(__cb(_, __frame, 19, 29, function ___(__0, __4) { return g(__cb(_, __frame, 19, 39, function ___(__0, __5) { return g(__cb(_, __frame, 19, 49, function ___(__0, __6) { return g(__cb(_, __frame, 19, 59, function ___(__0, __7) { var __1 = (((((__2 + __3) + __4) + __5) + __6) + __7); return _(null, __1); }, true), 5); }, true), 4); }, true), 3); }, true), 2); }, true), 1); }, true), 0); });
    }, "ebcdde"); _(); });});

asyncTest("switch without default", 1, function __37(_) { var __frame = { name: "__37", line: 465 }; return __func(_, this, arguments, __37, 0, __frame, function __$__37() {
    evalTest(function f(_) {
      function g(_, i) { var result; var __frame = { name: "g", line: 467 }; return __func(_, this, arguments, g, 0, __frame, function __$g() {
          result = "a";
          return delay(__cb(_, __frame, 2, 11, function ___(__0, __1) { return (function __$g(__break) { switch (__1) {
              case 1: result = "b";
                return __break();

              case 2: return _(null, "c");
              case 3:
              
              case 4: result = "d";
                return __break(); default: return __break(); }; })(function __$g() {


              return _(null, result); }); }, true), i); }); }; var __frame = { name: "f", line: 466 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {


        return g(__cb(_, __frame, 17, 9, function ___(__0, __2) { return g(__cb(_, __frame, 17, 19, function ___(__0, __3) { return g(__cb(_, __frame, 17, 29, function ___(__0, __4) { return g(__cb(_, __frame, 17, 39, function ___(__0, __5) { return g(__cb(_, __frame, 17, 49, function ___(__0, __6) { return g(__cb(_, __frame, 17, 59, function ___(__0, __7) { var __1 = (((((__2 + __3) + __4) + __5) + __6) + __7); return _(null, __1); }, true), 5); }, true), 4); }, true), 3); }, true), 2); }, true), 1); }, true), 0); });
    }, "abcdda"); _(); });});

asyncTest("switch with fall through", 1, function __38(_) { var __frame = { name: "__38", line: 486 }; return __func(_, this, arguments, __38, 0, __frame, function __$__38() {
    evalTest(function f(_) {
      function g(_, i) { var result; var __frame = { name: "g", line: 488 }; return __func(_, this, arguments, g, 0, __frame, function __$g() {
          result = "/";
          return delay(__cb(_, __frame, 2, 11, function ___(__0, __5) { return (function __$g(__break) { switch (__5) {
              case 1: return delay(__cb(_, __frame, 4, 14, function ___(__0, __6) {
                  result += __6; return __break(); }, true), "b"); case 2: var __1 = true;



              case 3: var __2 = true;
              case 4: var __3 = true;

              case 5: return (function __$g(__then) { if (__3) { return (function __$g(__then) { if (__2) { return (function __$g(__then) { if (__1) { return delay(__cb(_, __frame, 7, 14, function ___(__0, __7) { result += __7; __then(); }, true), "c"); } else { __then(); } ; })(__then); } else { __then(); } ; })(function __$g() { result += "d"; __then(); }); } else { __then(); } ; })(function __$g() { return delay(__cb(_, __frame, 12, 14, function ___(__0, __8) {
                    result += __8; return __break(); }, true), "e"); });

              case 6: var __4 = true; default:

                return (function __$g(__then) { if (__4) { return delay(__cb(_, __frame, 15, 14, function ___(__0, __9) { result += __9; __then(); }, true), "f"); } else { __then(); } ; })(function __$g() { return delay(__cb(_, __frame, 17, 14, function ___(__0, __10) {
                    result += __10; return __break(); }, true), "g"); }); }; })(function __$g() {

              return _(null, result); }); }, true), i); }); }; var __frame = { name: "f", line: 487 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {


        return g(__cb(_, __frame, 23, 9, function ___(__0, __2) { return g(__cb(_, __frame, 23, 19, function ___(__0, __3) { return g(__cb(_, __frame, 23, 29, function ___(__0, __4) { return g(__cb(_, __frame, 23, 39, function ___(__0, __5) { return g(__cb(_, __frame, 23, 49, function ___(__0, __6) { return g(__cb(_, __frame, 23, 59, function ___(__0, __7) { return g(__cb(_, __frame, 23, 69, function ___(__0, __8) { return g(__cb(_, __frame, 23, 79, function ___(__0, __9) { var __1 = (((((((__2 + __3) + __4) + __5) + __6) + __7) + __8) + __9); return _(null, __1); }, true), 7); }, true), 6); }, true), 5); }, true), 4); }, true), 3); }, true), 2); }, true), 1); }, true), 0); });
    }, "/g/b/cde/de/de/e/fg/g"); _(); });});

asyncTest("this", 5, function __39(_) { var __frame = { name: "__39", line: 513 }; return __func(_, this, arguments, __39, 0, __frame, function __$__39() {
    evalTest(function f(_) { var o;
      function O(x) {
        this.x = x; };




























      function delay2(val, _) { var __frame = { name: "delay2", line: 545 }; return __func(_, this, arguments, delay2, 1, __frame, function __$delay2() {
          return delay(__cb(_, __frame, 1, 10, _, true), val); }); }; var __frame = { name: "f", line: 514 }; return __func(_, this, arguments, f, 0, __frame, function __$f() { O.prototype.test1 = function O_prototype_test1__1(_) { var self, __this = this; var __frame = { name: "O_prototype_test1__1", line: 519 }; return __func(_, this, arguments, O_prototype_test1__1, 0, __frame, function __$O_prototype_test1__1() { self = __this; return delay(__cb(_, __frame, 2, 12, function ___(__0, __1) { __this.x = __1; strictEqual(__this, self); _(); }, true), (__this.x + 1)); }); }; O.prototype.test2 = function O_prototype_test2__2(_) { var self, __this = this; var __frame = { name: "O_prototype_test2__2", line: 524 }; return __func(_, this, arguments, O_prototype_test2__2, 0, __frame, function __$O_prototype_test2__2() { self = __this; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$O_prototype_test2__2() { return delay(__cb(_, __frame, 3, 13, function ___(__0, __1) { __this.x = __1; strictEqual(__this, self); __then(); }, true), (__this.x + 1)); }); })(function ___(ex, __result) { __catch(function __$O_prototype_test2__2() { if (ex) { ok(false); __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$O_prototype_test2__2() { _(); }); }); }); }; O.prototype.test3 = function O_prototype_test3__3(_) { var self, __this = this; var __frame = { name: "O_prototype_test3__3", line: 533 }; return __func(_, this, arguments, O_prototype_test3__3, 0, __frame, function __$O_prototype_test3__3() { self = __this; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$O_prototype_test3__3() { return delay(__cb(_, __frame, 3, 13, function ___(__0, __2) { __this.x = __2; throwError("test3"); ok(false); __then(); }, true), (__this.x + 1)); }); })(function ___(ex, __result) { __catch(function __$O_prototype_test3__3() { if (ex) { strictEqual(__this, self); return delay(__cb(_, __frame, 8, 13, function ___(__0, __1) { __this.x = __1; __then(); }, true), (__this.x + 1)); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$O_prototype_test3__3() { _(); }); }); }); };


        O.prototype.test4 = function O_prototype_test4__4(_) { var self, v1, v2, __this = this; var __frame = { name: "O_prototype_test4__4", line: 549 }; return __func(_, this, arguments, O_prototype_test4__4, 0, __frame, function __$O_prototype_test4__4() { self = __this;

            v1 = delay2((__this.x + 1), false);
            v2 = delay2(1, false);
            return v1(__cb(_, __frame, 4, 12, function ___(__0, __1) { return v2(__cb(_, __frame, 4, 20, function ___(__0, __2) { __this.x = (__1 + __2);
                strictEqual(__this, self); _(); }, true)); }, true)); }); };

        o = new O(1);
        return o.test1(__cb(_, __frame, 43, 4, function __$f() {
          return o.test2(__cb(_, __frame, 44, 4, function __$f() {
            return o.test3(__cb(_, __frame, 45, 4, function __$f() {
              return o.test4(__cb(_, __frame, 46, 4, function __$f() {
                return _(null, o.x); }, true)); }, true)); }, true)); }, true)); });
    }, 7); _(); });});

asyncTest("scoping", 1, function __40(_) { var __frame = { name: "__40", line: 564 }; return __func(_, this, arguments, __40, 0, __frame, function __$__40() {
    evalTest(function f(_) {
      function test(_) { var foo;


        function bar() {
          return foo; }; var __frame = { name: "test", line: 566 }; return __func(_, this, arguments, test, 0, __frame, function __$test() { foo = "abc";


          return delay(__cb(_, __frame, 7, 3, function __$test() {
            foo = "xyz";
            return _(null, bar); }, true)); }); }; var __frame = { name: "f", line: 565 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {


        return test(__cb(_, __frame, 13, 9, function ___(__0, __2) { var __1 = __2(); return _(null, __1); }, true)); });
    }, "xyz"); _(); });});

asyncTest("return undefined", 1, function __41(_) { var __frame = { name: "__41", line: 581 }; return __func(_, this, arguments, __41, 0, __frame, function __$__41() {
    evalTest(function f(_) {
      function test(_) { var __frame = { name: "test", line: 583 }; return __func(_, this, arguments, test, 0, __frame, function __$test() {
          return delay(__cb(_, __frame, 1, 3, function __$test() { return _(null); }, true)); }); }; var __frame = { name: "f", line: 582 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {



        return test(__cb(_, __frame, 6, 9, _, true)); });
    }, undefined); _(); });});

asyncTest("futures test", 1, function __42(_) { var __frame = { name: "__42", line: 591 }; return __func(_, this, arguments, __42, 0, __frame, function __$__42() {
    evalTest(function f(_) { var a, b, c, d;
      function delay2(val, _) { var __frame = { name: "delay2", line: 593 }; return __func(_, this, arguments, delay2, 1, __frame, function __$delay2() {
          return delay(__cb(_, __frame, 1, 10, _, true), val); }); }; var __frame = { name: "f", line: 592 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {


        a = delay2("a", false);
        b = delay2("b", false);
        c = delay2("c", false);
        d = delay2("d", false);
        return a(__cb(_, __frame, 9, 9, function ___(__0, __2) { return b(__cb(_, __frame, 9, 16, function ___(__0, __3) { return d(__cb(_, __frame, 9, 23, function ___(__0, __4) { return c(__cb(_, __frame, 9, 30, function ___(__0, __5) { var __1 = (((__2 + __3) + __4) + __5); return _(null, __1); }, true)); }, true)); }, true)); }, true)); });
    }, "abdc"); _(); });});

asyncTest("last case without break", 1, function __43(_) { var __frame = { name: "__43", line: 604 }; return __func(_, this, arguments, __43, 0, __frame, function __$__43() {
    evalTest(function f(_) { var __frame = { name: "f", line: 605 }; return __func(_, this, arguments, f, 0, __frame, function __$f() { return (function __$f(__break) {
          switch (true) {
          case true: return delay(__cb(_, __frame, 3, 3, __break, true));
            default: return __break(); }; })(function __$f() {

          return _(null, 1); }); });
    }, 1); _(); });});


asyncTest("async comma operator", 1, function __44(_) { var __frame = { name: "__44", line: 614 }; return __func(_, this, arguments, __44, 0, __frame, function __$__44() {
    evalTest(function f(_) { var a; var __frame = { name: "f", line: 615 }; return __func(_, this, arguments, f, 0, __frame, function __$f() { return (function __$f(_) {

          a = 4; a++; return delay(__cb(_, __frame, 2, 25, function ___(__0, __1) { a = __1; return delay(__cb(_, __frame, 2, 42, _, true), (a + 1)); }, true), (2 * a)); })(__cb(_, __frame, -614, 21, _, true)); });
    }, 11); _(); });});


asyncTest("async constructor", 1, function __45(_) { var __frame = { name: "__45", line: 621 }; return __func(_, this, arguments, __45, 0, __frame, function __$__45() {
    evalTest(function f(_) {
      function Foo(val, _) { var __this = this; var __frame = { name: "Foo", line: 623 }; return __func(_, this, arguments, Foo, 1, __frame, function __$Foo() {
          return delay(__cb(_, __frame, 1, 3, function __$Foo() {
            __this.x = val; _(); }, true)); }); }; var __frame = { name: "f", line: 622 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {

        Foo.prototype.y = function() {
          return (this.x + 1); };

        return __construct(Foo, 1)(5, __cb(_, __frame, NaN, NaN, function ___(__0, __2) { var __1 = __2.y(); return _(null, __1); }, true)); });
    }, 6); _(); });});


asyncTest("fibo false async", 1, function __46(_) { var __frame = { name: "__46", line: 634 }; return __func(_, this, arguments, __46, 0, __frame, function __$__46() {
    evalTest(function f(_) {
      function fibo(_, n) { var __frame = { name: "fibo", line: 636 }; return __func(_, this, arguments, fibo, 0, __frame, function __$fibo() { return (function __$fibo(_) {
            var __1 = (n > 1); return (function __$fibo(__then) { if (__1) { return fibo(__cb(_, __frame, 1, 18, function ___(__0, __3) { return fibo(__cb(_, __frame, 1, 35, function ___(__0, __4) { var __2 = (__3 + __4); return _(null, __2); }, true), (n - 2)); }, true), (n - 1)); } else { __then(); } ; })(function __$fibo() { return _(null, 1); }); })(__cb(_, __frame, -635, 21, _, true)); }); }; var __frame = { name: "f", line: 635 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {

        return fibo(__cb(_, __frame, 4, 9, _, true), 16); });
    }, 1597); _(); });});


asyncTest("coffeescript wrapper 1", 1, function __47(_) { var __frame = { name: "__47", line: 643 }; return __func(_, this, arguments, __47, 0, __frame, function __$__47() {
    evalTest(function f(_) { var __frame = { name: "f", line: 644 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {


        return (function ___closure(_) { return delay(__cb(_, __frame, 1, 10, _, true), "cs1"); })(__cb(_, __frame, 1, 9, _, true)); });
    }, "cs1"); _(); });});


asyncTest("coffeescript wrapper 2", 1, function __48(_) { var __frame = { name: "__48", line: 651 }; return __func(_, this, arguments, __48, 0, __frame, function __$__48() {
    evalTest(function f(_) { var __this = this; var __frame = { name: "f", line: 652 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {


        return (function ___closure(_) { return delay(__cb(_, __frame, 1, 10, _, true), "cs2"); })(__cb(_, __frame, 1, 9, _, true)); });
    }, "cs2"); _(); });});


asyncTest("coffeescript wrapper 3", 1, function __49(_) { var __frame = { name: "__49", line: 659 }; return __func(_, this, arguments, __49, 0, __frame, function __$__49() {
    evalTest(function f(_) { var __this = this, __arguments = arguments; var __frame = { name: "f", line: 660 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {


        return (function ___closure(_) { return delay(__cb(_, __frame, 1, 10, _, true), "cs3"); })(__cb(_, __frame, 1, 9, _, true)); });
    }, "cs3"); _(); });});


asyncTest("sync try/catch in async", 1, function __50(_) { var __frame = { name: "__50", line: 667 }; return __func(_, this, arguments, __50, 0, __frame, function __$__50() {
    evalTest(function f(_) { var __frame = { name: "f", line: 668 }; return __func(_, this, arguments, f, 0, __frame, function __$f() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$f() {

              return _(new Error("catch me")); }); })(function ___(ex, __result) { __catch(function __$f() { if (ex) {

                return _(null, "got it"); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$f() { _(); }); }); });

    }, "got it"); _(); });});


asyncTest("sync try/catch inside conditional", 1, function __51(_) { var __frame = { name: "__51", line: 677 }; return __func(_, this, arguments, __51, 0, __frame, function __$__51() {
    evalTest(function f(_) { var __frame = { name: "f", line: 678 }; return __func(_, this, arguments, f, 0, __frame, function __$f() { return (function __$f(__then) {
          if (true) { return (function ___(__then) { (function ___(_) { __tryCatch(_, __then); })(function ___(ex, __result) { __catch(function __$f() { if (ex) { __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, __then); }); } else { __then(); } ; })(_); });


    }, undefined); _(); });});


asyncTest("labelled break", 1, function __52(_) { var __frame = { name: "__52", line: 685 }; return __func(_, this, arguments, __52, 0, __frame, function __$__52() {
    evalTest(function f(_) { var result, i, j; var __frame = { name: "f", line: 686 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        result = "";

        i = 1; var __7 = false; return (function ___(__break) { var __more, __more__outer = { get: function() { return __more; }, set: function(v) { __more = v; } }; var __loop = __cb(_, __frame, 0, 0, function __$f() { var __break__outer = __break, __loop__outer = __loop; __more = false; if (__7) { i++; } else { __7 = true; } ; var __6 = (i < 10); if (__6) {

              j = 5; var __9 = false; return (function ___(__break) { var __more, __more__inner = { get: function() { return __more; }, set: function(v) { __more = v; } }; var __loop = __cb(_, __frame, 0, 0, function __$f() { var __break__inner = __break, __loop__inner = __loop; __more = false; if (__9) { j++; } else { __9 = true; } ; var __8 = (j < 10); if (__8) {
                    return delay(__cb(_, __frame, 6, 13, function ___(__0, __1) { result = (__1 + "!");
                      if (((i == 1) && (j == 7))) { return __break(); } ;
                      if (((i == 2) && (j == 7))) { return __break__inner(); } ;
                      if (((i == 3) && (j == 7))) { while (__more__inner.get()) { __loop__inner(); }; __more__inner.set(true); return; } ;
                      if (((i == 4) && (j == 7))) { while (__more__outer.get()) { __loop__outer(); }; __more__outer.set(true); return; } ;
                      if (((i == 5) && (j == 7))) { return __break__outer(); } ;
                      return delay(__cb(_, __frame, 12, 13, function ___(__0, __2) { return delay(__cb(_, __frame, 12, 32, function ___(__0, __3) { return delay(__cb(_, __frame, 12, 46, function ___(__0, __4) { result = (((__2 + __3) + __4) + "-"); while (__more) { __loop(); }; __more = true; }, true), j); }, true), i); }, true), result); }, true), result); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$f() {

                return delay(__cb(_, __frame, 14, 13, function ___(__0, __5) { result += __5; while (__more) { __loop(); }; __more = true; }, true), "/"); }); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$f() {

          return _(null, result); }); });
    }, "!15-!16-!/!25-!26-!/!35-!36-!!38-!39-/!45-!46-!!55-!56-!"); _(); });});


asyncTest("octal literal", 1, function __53(_) { var __frame = { name: "__53", line: 706 }; return __func(_, this, arguments, __53, 0, __frame, function __$__53() {
    evalTest(function f(_) { var __frame = { name: "f", line: 707 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        return _(null, 8); });
    }, 8); _(); });});


asyncTest("typeof rewriting bug (fibers)", 1, function __54(_) { var __frame = { name: "__54", line: 712 }; return __func(_, this, arguments, __54, 0, __frame, function __$__54() {
    evalTest(function f(_) { var hello; var __frame = { name: "f", line: 713 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        hello = "hello";
        return _(null, typeof (hello)); });
    }, "string"); _(); });});


asyncTest("ASI problems", 1, function __55(_) { var __frame = { name: "__55", line: 719 }; return __func(_, this, arguments, __55, 0, __frame, function __$__55() {
    evalTest(function f(_) { var s; var __frame = { name: "f", line: 720 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        s = "a";
        return delay(__cb(_, __frame, 2, 6, function ___(__0, __1) { s = __1;
          return delay(__cb(_, __frame, 3, 6, function ___(__0, __2) { s = __2;
            return delay(__cb(_, __frame, 4, 2, function __$f() {
              return delay(__cb(_, __frame, 5, 2, function __$f() {
                return _(null, s); }, true), s); }, true), s); }, true), s); }, true), s); });
    }, "a"); _(); });});


function twoResults(a, b, cb) {
  setTimeout(function() {
    cb(null, a, b);
  }, 0);};


function twoResultsSync(a, b, cb) {
  cb(null, a, b);};


asyncTest("multiple results ~_", 1, function __56(_) { var __frame = { name: "__56", line: 740 }; return __func(_, this, arguments, __56, 0, __frame, function __$__56() {
    evalTest(function f(_) { var results; var __frame = { name: "f", line: 741 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        return twoResults("abc", "def", __cb(_, __frame, 1, 16, function ___(__0, __1) { results = __1;
          return _(null, results); }, true)); });
    }, "abc"); _(); });});


asyncTest("multiple results [_]", 1, function __57(_) { var __frame = { name: "__57", line: 747 }; return __func(_, this, arguments, __57, 0, __frame, function __$__57() {
    evalTest(function f(_) { var results; var __frame = { name: "f", line: 748 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        return twoResults("abc", "def", __cb(_, __frame, 1, 16, function ___(__0, __1) { results = __1;
          return _(null, results.join("-")); }, true, true)); });
    }, "abc-def"); _(); });});


asyncTest("multiple results with future", 1, function __58(_) { var __frame = { name: "__58", line: 754 }; return __func(_, this, arguments, __58, 0, __frame, function __$__58() {
    evalTest(function f(_) { var results;
      function wrapper(a, b, _) { var __frame = { name: "wrapper", line: 756 }; return __func(_, this, arguments, wrapper, 2, __frame, function __$wrapper() { return twoResults(a, b, __cb(_, __frame, 0, 37, _, true, true)); }); }; var __frame = { name: "f", line: 755 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        return wrapper("abc", "def", false)(__cb(_, __frame, 2, 16, function ___(__0, __1) { results = __1;
          return _(null, results.join("-")); }, true)); });
    }, "abc-def"); _(); });});


asyncTest("multiple results synchronously", 1, function __59(_) { var __frame = { name: "__59", line: 762 }; return __func(_, this, arguments, __59, 0, __frame, function __$__59() {
    evalTest(function f(_) { var results; var __frame = { name: "f", line: 763 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
        return twoResultsSync("abc", "def", __cb(_, __frame, 1, 16, function ___(__0, __1) { results = __1;
          return _(null, results.join("-")); }, true, true)); });
    }, "abc-def"); _(); });});


asyncTest("this in futures", 2, function __60(_) { var c; var __frame = { name: "__60", line: 769 }; return __func(_, this, arguments, __60, 0, __frame, function __$__60() {
    c = {
      v: 1,
      test: function test__1(_) { var __this = this; var __frame = { name: "test__1", line: 772 }; return __func(_, this, arguments, test__1, 0, __frame, function __$test__1() { return _(null, __this.v); }); } };

    return c.test(__cb(_, __frame, 5, 15, function ___(__0, __2) { strictEqual(__2, 1, "direct call");
      return c.test(false)(__cb(_, __frame, 6, 13, function ___(__0, __3) { strictEqual(__3, 1, "future call");
        start(); _(); }, true)); }, true)); });});


asyncTest("arity of async functions", 3, function __61(_) { var f, g; var __frame = { name: "__61", line: 779 }; return __func(_, this, arguments, __61, 0, __frame, function __$__61() {
    f = function f__1(_, a, b, c, d, e, f, g, h, i) { var __frame = { name: "f__1", line: 780 }; return __func(_, this, arguments, f__1, 0, __frame, function __$f__1() { return _(null, (a + b)); }); };
    g = function g__2(_, a) { var __frame = { name: "g__2", line: 781 }; return __func(_, this, arguments, g__2, 0, __frame, function __$g__2() { return f(__cb(_, __frame, 0, 33, _, true), 1, 2); }); };
    strictEqual(f.length, 10, "f.length === 10");
    strictEqual(g.length, 2, "g.length === 2");
    return g(__cb(_, __frame, 5, 13, function ___(__0, __3) { strictEqual(__3, 3, "g(_) === 3");
      start(); _(); }, true)); });});


asyncTest("futures on _(fn, idx)", 1, function __62(_) { var f, fut; var __frame = { name: "__62", line: 788 }; return __func(_, this, arguments, __62, 0, __frame, function __$__62() {
    f = __rt.streamlinify(function(i, cb) {
      setTimeout(function() {
        cb(null, (i + 1));
      }, 0);
    }, 1);
    fut = f(5, false);
    return fut(__cb(_, __frame, 7, 13, function ___(__0, __1) { strictEqual(__1, 6, "fut(_) === 6");
      start(); _(); }, true)); });});


asyncTest("do while", 1, function __63(_) { var i, s, v;

  function read(_) { var __frame = { name: "read", line: 801 }; return __func(_, this, arguments, read, 0, __frame, function __$read() {
      return delay(__cb(_, __frame, 1, 9, _, true), ++i); }); }; var __frame = { name: "__63", line: 799 }; return __func(_, this, arguments, __63, 0, __frame, function __$__63() { i = 0;

    s = "";
    return read(__cb(_, __frame, 6, 9, function ___(__0, __3) { v = __3; var __1 = true; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$__63() { __more = false; return (function __$__63(_) { return (function __$__63(_) { var __2 = __1; if (__2) { return _(null, __2); } ;


              return read(__cb(_, __frame, 9, 15, function ___(__0, __4) { var __3 = ((v = __4) < 5); return _(null, __3); }, true)); })(__cb(_, __frame, -798, 21, _, true)); })(__cb(_, __frame, -798, 21, function ___(__0, __5) { if (__5) { __1 = false; s += v; while (__more) { __loop(); }; __more = true; } else { __break(); } ; }, true)); }); do { __loop(); } while (__more); __more = true; })(function __$__63() {
        strictEqual(s, "1234");
        start(); _(); }); }, true)); });});


asyncTest("return undefined", 1, function __64(_) {
  function read(_) { var __frame = { name: "read", line: 814 }; return __func(_, this, arguments, read, 0, __frame, function __$read() {
      return delay(__cb(_, __frame, 1, 9, _, true), 1); }); };

  function f(_) { var __frame = { name: "f", line: 817 }; return __func(_, this, arguments, f, 0, __frame, function __$f() {
      return read(__cb(_, __frame, 1, 2, function __$f() { _(); }, true)); }); }; var __frame = { name: "__64", line: 813 }; return __func(_, this, arguments, __64, 0, __frame, function __$__64() {

    return f(__cb(_, __frame, 7, 13, function ___(__0, __1) { strictEqual(__1, undefined);
      start(); _(); }, true)); });});


if ((typeof require !== "undefined")) {
  var globals = require("streamline/lib/globals");
  var isFast = /-fast$/.test(globals.runtime);

  if (globals.Promise) { asyncTest("promises", (isFast ? 3 : 7), function __65(_) { var p1, p2, p3, p4;
      function test(v, _) { var __frame = { name: "test", line: 829 }; return __func(_, this, arguments, test, 1, __frame, function __$test() {
          return delay(__cb(_, __frame, 1, 10, _, true), v); }); }; var __frame = { name: "__65", line: 828 }; return __func(_, this, arguments, __65, 0, __frame, function __$__65() { return (function __$__65(__then) {

          if (!isFast) {
            p1 = test("a");
            p2 = test("b", null);
            strictEqual((p1 && typeof p1.then), "function");
            strictEqual((p2 && typeof p2.then), "function");
            return __pthen(p1, "then", __cb(_, __frame, 9, 15, function ___(__0, __1) { strictEqual(__1, "a");
              return __pthen(p2, "then", __cb(_, __frame, 10, 15, function ___(__0, __2) { strictEqual(__2, "b"); __then(); }, true)); }, true)); } else { __then(); } ; })(function __$__65() {

          p3 = test("c", null);
          strictEqual((p3 && typeof p3.then), "function");
          return __pthen(p3, "then", __cb(_, __frame, 14, 14, function ___(__0, __3) { strictEqual(__3, "c"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__65() {

                  p4 = delayFail(null, "ERR d");
                  return __pthen(p4, "then", __cb(_, __frame, 17, 3, function __$__65() {
                    ok(false); __then(); }, true)); }); })(function ___(ex, __result) { __catch(function __$__65() { if (ex) {

                    strictEqual(ex, "ERR d"); __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$__65() {

                start(); _(); }); }); }, true)); }); }); }); };



  if (!isFast) { asyncTest("coffeescript default values", 8, function __66(_) { var got, that, r, f;


      function fn(a, b, cb, c) { var args = Array.prototype.slice.call(arguments, 0);
        if ((a == null)) {
          args[0] = 2; } ;

        if ((cb == null)) {
          args[2] = function(e, r) {
            got = r; }; } ; return (function __1(a, b, _, c) { var __this = this; var __frame = { name: "__1", line: 857 }; return __func(_, this, arguments, __1, 2, __frame, function __$__1() {


            if ((c == null)) {
              c = 5; } ;

            strictEqual(__this, that);
            return delay(__cb(_, __frame, 13, 10, _, true), ((((("a=" + a) + ", b=") + b) + ", c=") + c)); }); }).apply(this, args); }; var __frame = { name: "__66", line: 854 }; return __func(_, this, arguments, __66, 0, __frame, function __$__66() { that = { };

        return fn.call(that, 3, 1, __cb(_, __frame, 18, 13, function ___(__0, __1) { r = __1;
          strictEqual(r, "a=3, b=1, c=5");
          f = fn.call(that);

          strictEqual(f, undefined);
          strictEqual(got, undefined);
          return delay(__cb(_, __frame, 24, 2, function __$__66() {
            strictEqual(got, "a=2, b=undefined, c=5");
            fn.call(that, 8, 3);
            return delay(__cb(_, __frame, 27, 2, function __$__66() {
              strictEqual(got, "a=8, b=3, c=5");
              start(); _(); }, true)); }, true)); }, true)); }); }); };};




(false && asyncTest("futures on non-streamline APIs", 1, function __67(_) { var fut;
  function nat(cb) {
    setImmediate(function() {
      cb(null, "abc"); }); }; var __frame = { name: "__67", line: 888 }; return __func(_, this, arguments, __67, 0, __frame, function __$__67() {


    fut = nat(false);
    return fut(__cb(_, __frame, 7, 13, function ___(__0, __1) { strictEqual(__1, "abc");
      start(); _(); }, true)); });}));
